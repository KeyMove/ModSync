<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAADgAAACAAAAA2AAAATAAA
        AFoAAABiAAAAYgAAAFoAAABKAAAANAAAAB4AAAAMAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAEgAAADIAAABcAAQGiQAG
        B6sACAnDAAkLzwEOE9cBDhPXAAkLzwAICcEABgipAAQEhwAAAFoAAAAuAAAAEAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACYAAwNeAAgLnQIa
        Is0IQ1frDXCP+RKPt/0Voc3/FqfV/xan1f8UoM3/EY60/QxujfcIQVPpAxkfywAIDJkAAANaAAAAJAAA
        AAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAA6AAgKgwQj
        LskMYHrxFJa+/Rejz/8Wl8D/Fn6f/xZmf/8YXHL/GFxy/xZngP8WgKD/FpjA/xej0P8Tk7v9C1t07wMi
        LMUABgp+AAAANgAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOAAQEQAIU
        GZkJRlrhE5C2/Recxv8Xe5v/GUhW/xwmKf8fHx//ICAg/x8gIf8fISL/ICAg/x4eHv8cJyv/GUpa/xd+
        n/8Xnsj/E42z+whDVN0AExiTAAAEPAAAAAoAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAE
        BDoDHCSdDVx06xidyP8ZgqP/G0RQ/yAiI/8jIyP/IyMj/yIiIv8fIiP/GDE4/xgxOf8gIyT/IyMj/yMj
        I/8iIiL/HyMk/xtHVv8ZhKf/F5zG/wxWbecDGCCXAAAFNgAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAIAAAAoBBsjjQ9geusancb/G2qD/yAsL/8kJCT/JSUl/yUlJf8kJCT/ISUm/xg6RP8TcI3/F1pv/x4k
        Jf8jIyP/JCQk/yUlJf8lJSX/JCQk/x8uMv8bboj/GpzG/w1bc+cCGR+FAAAAJAAAAAIAAAAAAAAAAAAA
        AAAAAAAAAAAAEgARFmgNVmzdHKDJ/x1mfP8kKCn/KCgo/ygoKP8oKCj/Jicn/yEpK/8ZQ1D/FYGi/xek
        0P8WaoX/GDZA/xwxN/8hKi3/JCYn/ycnJ/8oKCj/KCgo/yQpK/8dbIP/G6DJ/wxQZdkADRNgAAAADgAA
        AAAAAAAAAAAAAAAAAAIACQk2CjpJuRudxv0ee5n/JCwu/yoqKv8qKir/Kioq/ykqKv8jLjH/GU1c/xeK
        rv8ar93/Gq/d/xiizf8Xkbj/FXyd/xZbcf8bPUj/Iisu/ygpKf8qKir/Kioq/yQuMf8egaD/GprB/Qc0
        QbEABQsuAAAAAgAAAAAAAAAAAAAADAIZIG4Xf6DxH5rA/yM+Rv8sLCz/Kysr/ykrK/8oKy3/KSsr/yFG
        Uf8ZjrH/HbPg/x2z4f8ds+H/HbPh/x2z4f8ds+H/HK/c/xmOs/8aVmj/IzE1/yorK/8sLCz/LCws/yJD
        Tf8fncT/F3iW7QIWG2YAAAAKAAAAAAAAAAAACAggC0BOtSCr1P8hbIL/LCws/y8vL/8sLy//Ijk//x5K
        WP8lMDT/JkJK/yB8mP8fqNH/H7Xi/x+z4P8eo8v/Hpm//x+lz/8fsd7/H7Xj/xyizP8cYXb/JjM4/y0u
        Lv8vLy//LCws/yB0jf8gqdH/CjlGqwAJCRwAAAAAAAAAAgAQGEAYeJbnJKbM/yc+RP8yMjL/MTEy/yg4
        Pf8dcIn/Hpm+/x9abP8pNDf/KkFI/yN0jP8hpc3/Ia/b/yB4kv8jUF7/JGl+/yKPsf8hrtr/Irfl/x+i
        yv8gVWX/LDM0/zIyMv8yMjL/JkNK/ySo0P8YcYzhABIWOAAAAAAAAAAIBRoiaiKiyf0liqj/MDEx/zU1
        Nf8xNjf/I1Ni/yKq0v8kt+P/I5Gz/yhETP8zMzP/Lj9E/yZtgv8jmr7/JWp+/y8zNP8xNDX/Kk1Y/ySK
        p/8kstz/Jbrm/yCLq/8oQUj/MzM0/zU1Nf8vMTH/JJCw/yKcwfsDFhteAAAABAAUFAwMOESXJ7Xf/yZn
        eP83Nzf/Nzc3/zA+Q/8iepT/KL3o/ye13v8ohJ//MEBF/zg4OP83Nzf/MT9D/ypjc/8rWWf/Mzg4/zg4
        OP81Njf/K1Ng/yabvv8nu+b/JrLb/yRYZ/8zODr/Nzc3/zc3N/8mbYL/J7Xe/wktOIkAAAAGACQkDhVa
        bLMqtt7/Kk5Z/zs7O/85OTn/MUdO/yWcvv8rv+r/KafM/ytdbP85OTn/Ozs7/zs7O/86Ojr/Nz5A/zZA
        Qv85Ozz/Ozs7/zs7O/8zOjz/KX+Z/ym23/8qvun/I3qU/zNBRf86Ojr/Ozs7/ylVYv8ruOH/FE5gqQAA
        AAgANzcOGm6Guyy33/8tQUb/Pj4+/zw8PP8yTFT/KrDW/y7C7P8soMH/L0tT/z4+Pv8+Pj7/Pj4+/z4+
        Pv8+Pj7/Pj4+/z4+Pv8+Pj7/Pj4+/zo6Ov8rcYX/K7LY/y7C7P8nlLT/NEhN/zw8PP8+Pj7/LEdP/y25
        4f8YY3q1AAAACAA7TgwddI67L7ng/y8+Qv9BQUH/Pz8//zVPV/8uttz/McXu/y6iwv8xS1H/QUFB/0FB
        Qf9BQUH/QUFB/0FBQf9BQUH/QUFB/0FBQf9BQUH/PT09/y9yhf8utNn/McXu/yqdvf82S1H/Pz8//0FB
        Qf8uREv/L7ri/xtrgrMAAAAGAExMCh1yiq8xvOL/L0dN/0RERP9CQkL/OVFY/y+u0f80x/D/MKfI/zFU
        Xv9CQkL/RERE/0RERP9BQkL/Pj8//0FBQf9ERET/RERE/0RERP88Pj7/MHqP/zG53/80x/D/LZKu/zpM
        Uf9DQ0P/RERE/y5OV/8xveT/G2Z7pwAAAAQAVVUGG2J2lzO/5f8vW2f/RkZG/0ZGRv8+UVb/MJq3/zbK
        8v8zud3/MHWH/zw/QP9GRkb/RkZG/z1LT/8yUVn/N0dL/0NDQ/9HR0f/RUVF/zVHS/8xk67/NcTr/zbH
        7f8yd4r/QEpM/0ZGRv9GRkb/LmNx/zPA5/8YVmmJAAAAAAAAQAQTRlNeNL/k/y96jf9ERET/SUlJ/0RO
        UP81eY3/OMnw/zjI7/80pML/Mllj/z9AQP9HR0f/PVVc/zCBlv8weo7/OEpP/0RFRf9ER0j/NnKC/za2
        2P85y/P/NrXY/ztga/9GSUn/SUlJ/0NDQ/8vgpf/M73j/RA5RVAAAAAAAAAAAAwxNyowrM3vM6PC/z1A
        Qf9MTEz/SkxM/0BeZ/84qcb/PM/1/zrG6/80n7v/MWVy/zVCRf8ySlH/MpSu/ze63f8yhZr/N09V/0JF
        Rv88aXT/Oa3M/zvH7P84iJ7/RVRX/0tLS/9MTEz/O0FC/zSpyf8vqMjpBy00IgAAAAAAAAAAFE5iDCmL
        pbU4veH/NFlj/01NTf9PT0//SlFT/z50gv87vN3/P9H3/z3K7/85tNT/Npmy/zWWr/85uNn/P9D2/zvC
        5f81kqn/OFdf/0NNT/9Acn//O4yi/0Nhaf9NUFD/UFBQ/0xMTP8zXmr/OMDk/yiFn6sZTEwKAAAAAAAA
        AAAAAFUCG2R2VDe83fs2k6v/QkVG/1JSUv9SUlL/S1Za/0B8i/89ttb/QdL3/0HS+P9AzvT/P8zy/0DQ
        9v9B0/n/QdP5/z7I7P85kqn/R1xi/01UVv9LW1//T1RV/1JSUv9SUlL/QEVH/zaatP83t9j3H2B1SgAA
        AAIAAAAAAAAAAAAAAAAVSlUYL5extTu93v82ZXH/Tk5O/1VVVf9UVFT/T1ha/0Zvev8/ma//P8Dh/0LS
        9/9D1fr/Q9X6/0PV+v9D1fr/QLnY/0J6if9OV1r/VFRU/1RUVP9UVFT/VVVV/01NTf82a3j/O7/h/y2T
        racNUV4SAAAAAAAAAAAAAAAAAAAAAABVVQIicolCOLPT4zqpxf87UVb/U1NT/1dXV/9WVlb/VFdY/09f
        ZP9JbXX/Q3yK/z6Pov8/udf/Rdb6/0G00P9FeIX/UFpc/1VWVv9XV1f/V1dX/1dXV/9SUlL/OlRb/zus
        yv83r83dIm6EPAAAAAIAAAAAAAAAAAAAAAAAAAAAAAAAABVVVQwsh51sPLzc9TmZsv88TVL/UlJS/1lZ
        Wf9aWlr/WVlZ/1dZWv9VW1z/SGdv/z+iu/9Crcf/SXJ9/1RbXf9ZWVn/Wlpa/1paWv9ZWVn/UFBQ/zpP
        VP85nrj/PLvc7ymDmGIXRkYKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABZZZBYwj6WBPb3e9zul
        v/84XGX/R0hI/1hYWP9cXFz/XFxc/1tbW/9PZWr/Q3mH/0xveP9XXF3/W1tb/1xcXP9cXFz/V1dX/0dH
        SP83YGv/PKjE/z683fMwjKZ2G1FeEgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBg
        ahgwj6V0Pbzc6UC93f85jKH/OVFY/0pKSv9YWFj/XFxc/1pfYf9XYGP/W15f/15eXv9cXFz/V1dX/0lJ
        Sf85U1v/OZCm/0C+3/89u9rlMIqkahhVYRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAABJJWw4pfpZKOanGv0LI6ftBvdz/OZCm/zVhbP83RUj/Pj8//0NDQ/9DQ0P/Pj8//zZF
        Sf80Y27/OpSq/0G+3v9Cxub7OKbDuSl+mEQVVVUMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQAQbZHYcK4GXZDyvzM1DyOr7Rs/x/0XJ6/9Butj/ParG/z2r
        xv9Bu9n/Rcrr/0bP8f9DyOj7O63KxyuClV4dYmwaAEBABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMzMEDElJFCJfbkIxi6KHOanEsz2t
        yNk/rcrpP63K6T2sydk4psKxMYqggyRhbT4OR1USAEBABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAjOZ
        mQQccY4IHktaEBdRXRYYSVUUHktaEBlmfwoAZmYEAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA///////gB///gAH//gAA//wAAD/4AAAf8AAAD/AAAA/gAAAH4AAAB8AA
        AAPAAAADwAAAA4AAAAGAAAABgAAAAYAAAAGAAAABgAAAAcAAAAPAAAADwAAAA+AAAAfgAAAH8AAAD/gA
        AB/4AAA//gAAf/8AAP//wAP///AP//////8=
</value>
  </data>
</root>